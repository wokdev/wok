{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wok","text":"<p>A multirepo management tool.</p> <p>Manage multiple git repos as part of a single workspace.</p> <p>Wok utilizes git submodules and works as a package manager on top of them.</p> <p>Get started</p>"},{"location":"cli/","title":"Wok Commands Reference","text":"<pre><code>wok [&lt;OPTIONS&gt;]\n</code></pre>"},{"location":"cli/#-f-wok-file-path","title":"-f / --wok-file-path","text":"<pre><code>wok -f &lt;WOK_FILE_PATH&gt;\nwok --wok-file-path &lt;WOK_FILE_PATH&gt;\n</code></pre> <p>Default</p> <p><code>wok.yaml</code></p> <p>Overrides default path to Wokfile.</p>"},{"location":"cli/#-help","title":"--help","text":"<pre><code>wok --help\n</code></pre> <p>Shows list of possible commands and global options reference. When used with a specific subcommand shows help for that subcommand.</p>"},{"location":"cli/#init","title":"init","text":"<pre><code>wok init\n</code></pre> <p>Initialize Wok configuration in an Umbrella Repo.</p> <p>This creates Wokfile in the repo and introspects existing submodules adding them to the Wokfile, optionally switching them to the same branch as the current branch.</p> <p><code>wok init</code> fails if Wokfile is already present in the repo.</p>"},{"location":"cli/#-sync","title":"--sync","text":"<pre><code>wok init --sync\n</code></pre> <p>Switches all introspected submodules to the branch matching the current <code>HEAD</code> branch in the umbrella repo.</p>"},{"location":"cli/#head","title":"head","text":"<pre><code>wok head\n</code></pre> <p>Operate on subrepos heads.</p>"},{"location":"cli/#switch","title":"switch","text":"<pre><code>wok head switch\n</code></pre> <p>Switch all subrepos heads to the current umbrella repo head.</p>"},{"location":"cli/#repo","title":"repo","text":"<pre><code>wok repo\n</code></pre> <p>Manage subrepos configuration.</p>"},{"location":"cli/#add","title":"add","text":"<pre><code>wok repo add &lt;SUBMODULE_PATH&gt;\n</code></pre> <p>Add submodule previously configured in the repo at the path <code>&lt;SUBMODULE_PATH&gt;</code> to Wokfile.</p>"},{"location":"cli/#rm","title":"rm","text":"<pre><code>wok repo rm &lt;SUBMODULE_PATH&gt;\n</code></pre> <p>Remove submodule configured in the repo at the path <code>&lt;SUBMODULE_PATH&gt;</code> from Wokfile.</p>"},{"location":"getting-started/","title":"Getting Started with Wok","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>Wok seamlessly manages multiple Git repositories simultaneously. Its core methodology bears a resemblance to popular package managers such as <code>cargo</code>, <code>poetry</code>, or <code>npm</code>.</p> <p>In this context, we consider the <code>wok.yaml</code> configuration file as equivalent in importance to a package manager's primary configuration file, similar to how <code>Cargo.toml</code> is treated in <code>cargo</code>. </p> <p>Submodule objects, once they've been committed to the primary repository, assume the role of a lock file counterpart.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>cargo install wok-dev@0.3.0-dev\n</code></pre>"},{"location":"getting-started/#initializing-workspace","title":"Initializing Workspace","text":"<pre><code>mkdir my-project-space &amp;&amp; cd my-project-space\ngit init\nwok init\n</code></pre>"},{"location":"wokfile/","title":"Wokfile (<code>wok.yaml</code>)","text":"<p>Wok stores the configuration for sub repos in a file.</p> <p>The file uses YAML syntax.</p> <p>The file should be stored in the main repo containing all sub repos.</p> <p>The default path of the file is <code>wok.yaml</code> relative to the root dir of the main repo.</p> <p>Wok will try to find the <code>wok.yaml</code> file using alternative paths in the following order:</p> <ul> <li><code>wok.yaml</code> (the default)</li> <li><code>wok.yml</code></li> <li><code>Wokfile</code></li> </ul>"},{"location":"wokfile/#wokyaml-syntax","title":"Wok.yaml Syntax","text":""},{"location":"wokfile/#first-level-keys","title":"First-level Keys","text":"<ul> <li><code>version</code> -- String -- Wokfile Specification version. Must contain \"1.0\" for now.</li> <li><code>repos</code> -- List of Repo Objects -- Each object in the list corresponds to a configured sub repo.</li> </ul>"},{"location":"wokfile/#repo-object","title":"Repo Object","text":"<ul> <li><code>path</code> -- String -- path to the configured submodule</li> <li><code>ref</code> -- String -- current branch configured for the <code>HEAD</code> reference of the submodule to point to</li> </ul>"},{"location":"wip/cli-next/","title":"Planned Wok CLI","text":"<p>Work in progress</p>"},{"location":"wip/cli-next/#cli-design","title":"CLI Design","text":"<p>Wok's CLI could be separated into the following logical sections:</p>"},{"location":"wip/cli-next/#housekeeping","title":"Housekeeping","text":"<ul> <li><code>init</code> -- create <code>wok.yaml</code></li> <li><code>status</code> -- show the list of subprojects in wok config and for each repo: the current branch in the wok config, whether the checked out branch differed, whether it is clean</li> </ul>"},{"location":"wip/cli-next/#package-management","title":"Package Management","text":"<ul> <li><code>add</code> -- add a subproject to the config, add submodule, check out the repo, add changes to the index</li> <li><code>remove</code> -- remove a subproject from the config, remove submodule, remove the directory, add changes to the index</li> <li><code>update</code> -- switch each repo to its configured branch, fetch changes, update using the strategy configured in git, add changes to the index</li> <li><code>lock</code> -- ensure each repo is switched to its configured branch, do not fetch changes, add changes to the index</li> </ul>"},{"location":"wip/cli-next/#development-flow","title":"Development Flow","text":"<ul> <li><code>switch [--create] [--all] [--branch &lt;branch_name&gt;] [[[&lt;repo&gt;] &lt;repo&gt;] \u2026]</code> -- switch each <code>&lt;repo&gt;</code> to the current main repo branch in the config as in <code>git switch</code>, perform actions as in <code>wok lock</code> on those repos;<ul> <li>with <code>--create</code> -- create the branch in repos if it doesn't exist;</li> <li>with <code>--all</code> -- act as all configured repos were provided;</li> <li>with <code>--branch &lt;branch_name&gt;</code> -- use <code>&lt;branch_name&gt;</code> instead of the current main repo branch</li> </ul> </li> <li><code>push</code> [-u|--set-upstream] [--all] [--branch ] [[[] ] \u2026] -- ensure  each <code>&lt;repo&gt;</code> is switched to its configured branch and then perform git push on those repos;<ul> <li>if no <code>&lt;repo&gt;</code> provided act on all repos matching current main repo branch;</li> <li>with <code>--set-upstream</code>(<code>-u</code>) add upstream reference if not already configured;</li> <li>with <code>--all</code> -- act as all configured repos were provided;</li> <li>with <code>--branch &lt;branch_name&gt;</code> -- act only on repos currently configured to be on <code>&lt;branch_name&gt;</code></li> </ul>"},{"location":"wip/cli-next/#release-flow","title":"Release Flow","text":"<ul> <li><code>tag [--all] [--branch &lt;branch_name&gt;] [-s|--sign] [--push] [&lt;tagname&gt; [[[&lt;repo&gt;] &lt;repo&gt;] \u2026]]</code> -- add a tag reference <code>&lt;tagname&gt;</code> to each <code>&lt;repo&gt;</code>;<ul> <li>without <code>&lt;tagname&gt;</code> and <code>&lt;repo&gt;</code> show tag references closest to the current <code>HEAD</code> reference for each configured repo;</li> <li>with <code>--all</code> -- act as all configured repos were provided;</li> <li>with <code>--branch &lt;branch_name&gt;</code> -- act only on repos currently configured to be on <code>&lt;branch_name&gt;</code>;</li> <li>with <code>--sign</code>(<code>-s</code>) -- make a signed tag in a way similar to <code>git tag -s</code>;</li> <li>with <code>push</code> -- push created references immediately</li> </ul> </li> </ul>"}]}